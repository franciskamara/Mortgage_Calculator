@page "/mortgageCalculator"
@using Mortgage_Calculator

<PageTitle>Mortgage Calculator</PageTitle>

@*<a style="font-size:x-small" href="/home">Click to go back </a>*@

<div class="h2 pb-0 mb-0 border-bottom" style="color: white; background-color: #273157">
    <p>Mortgage Calculator</p>
</div>

<!--Navbar setup and styling-->
@*<NavBar @bind-selection="calcOption"></NavBar>*@
<!--Navbar setup and styling-->
<nav style="width: 100%; background-color: #34495e; color: rgba(255, 255, 255, 0.5); padding: 10px; ">
    <div class="topnav" style="text-align: left;">
        <a class="nav-link" style="color:white; cursor:pointer; text-decoration:none; hover" @onclick="() => setCalcOption(1)">Calculate a mortgage</a>
        &nbsp
        <a class="nav-link" style="color: white; cursor: pointer; text-decoration: none" @onclick="() => setCalcOption(2)">Compare mortgages</a>
    </div>
    <br />
</nav>

<style>
    .nav-link {
        display: inline-block;
        border-radius: 50%; /* Make circular on hover */
        transition: all 0.3s ease; /* Smooth transition */
    }

        .nav-link:hover {
            background-color: #555;
            color: white;
            border-radius: 0;
            padding: 10px 15px;
            transform: scale(1.1); /* Slightly enlarge the link */
        }
</style>

@if (errorMessage != "")
{
    <div class="alert alert-danger" role="alert" style="text-align:center">
        <p class="fs-6">
            @errorMessage
        </p>
    </div>
}

@if (calcOption == 1)// Option for single mortgage calculation
{
    <br />
    <div title="Single mortgage form">

        <div class="h2 pb-0 mb-4 border-bottom" style="color: #273157">
            <h5>Single mortgage</h5>
            <br />
        </div>

        <!-- Calculator inputs -->
        <CalculatorInputs userInput="userInput"></CalculatorInputs>

        <ButtonCalculate DisplayResults="DisplayResults"></ButtonCalculate>
    </div>

    <!-- RESULTS OUTPUT -->
    <div title="Results display">
        @if (resultSet?.PaymentItems?.Count > 0 && errorMessage == string.Empty)// Results output
        {
            <div style="border: #34495e; border-width: 10px; border-style: solid; border-radius: 10px; padding: 15px;">
                <br />
                <ResultsHeader></ResultsHeader>

                <!-- 1) Line chart output -->
                <div><LineChartOutput resultSet="resultSet"></LineChartOutput></div>

                <!-- 2) Total repayment, Capital and Interest only values -->
                <!-- Total amount output -->
                <OutputTotalAmount userInput="userInput" resultSet="resultSet"></OutputTotalAmount>

                <!-- Capital and Interest repayment amounts -->
                <OutputCapital_InterestValues userInput="userInput" resultSet="resultSet"></OutputCapital_InterestValues>

                <!-- 3) Monthly repayment amount -->
                <OutputMonthlyRepaymentAmount resultSet="resultSet"></OutputMonthlyRepaymentAmount>

                <br />
                <!-- 4) Total repayment months -->
                <OutputTotalRepayMonths resultSet="resultSet"></OutputTotalRepayMonths>

                <!-- 5) End of Year repayment balance -->
                <OutputEOYRepaymentList resultSet="resultSet" userInput="userInput"></OutputEOYRepaymentList>

                <!-- 6) Warning indicator of repayment increase, 3% -->
                <OutputIntIncreaseMessage resultSet="resultSet"></OutputIntIncreaseMessage>
            </div>
        }
    </div>
}

@if (calcOption == 2)
{
    <div title="Comparison mortgages form">
        <div class="h2 pb-0 mb-4 border-bottom" style="color: #273157">
            <br />
            <h5>First mortgage</h5>
            <br />
        </div>

        <!-- Calculator inputs 1 -->
        <CalculatorInputs userInput="userInput"></CalculatorInputs>

        <div class="h2 pb-0 mb-4 border-bottom" style="color: #273157">
            <h5>Second mortgage</h5>
            <br />
        </div>

        <!-- Calculator inputs 2 -->
        <CalculatorInputs userInput="userInputCompare"></CalculatorInputs>

        <ButtonCalculate DisplayResults="DisplayResults"></ButtonCalculate>
    </div>

    <!-- RESULT OUTPUT -->
    <div title="Results display">
        @if (resultSet?.PaymentItems?.Count > 0 && resultSetCompare?.PaymentItems?.Count > 0 && errorMessage == string.Empty)
        {
            <div style="border: #34495e; border-width: 10px; border-style: solid; border-radius: 10px; padding: 15px;">
                <br />
                <ResultsHeader></ResultsHeader>

                <!-- 1) Line chart output -->
                <div><LineChartOutput resultSet="resultSet" resultSetCompare="resultSetCompare"></LineChartOutput></div>

                <!-- FIRST RESULT OUTPUT -->
                <br />
                <h6>Mortgage 1 Results</h6>

                <!-- 2) Total repayment, Capital and Interest only values -->
                <!-- Total repayment amount -->
                <OutputTotalAmount userInput="userInput" resultSet="resultSet"></OutputTotalAmount>

                <!-- Capital and Interest repayment amounts -->
                <OutputCapital_InterestValues userInput="userInput" resultSet="resultSet"></OutputCapital_InterestValues>

                <!-- 3) Monthly repayment amount -->
                <OutputMonthlyRepaymentAmount resultSet="resultSet"></OutputMonthlyRepaymentAmount>

                <!-- 4) Total repayment months -->
                <OutputTotalRepayMonths resultSet="resultSet"></OutputTotalRepayMonths>

                <!-- 5) End of Year repayment balance -->
                <OutputEOYRepaymentList resultSet="resultSet" userInput="userInput"></OutputEOYRepaymentList>

                <!-- 6) Warning indicator of repayment increase, 3% -->
                <OutputIntIncreaseMessage resultSet="resultSet"></OutputIntIncreaseMessage>


                <!-- SECOND RESULT OUTPUT -->
                <br />

                <h6>Mortgage 2 Results</h6>

                <!-- 2) Total repayment, Capital and Interest only values -->
                <!-- Total repayment amount -->
                <OutputTotalAmount userInput="userInputCompare" resultSet="resultSetCompare"></OutputTotalAmount>

                <!-- Capital and Interest repayment amounts -->
                <OutputCapital_InterestValues userInput="userInputCompare" resultSet="resultSetCompare"></OutputCapital_InterestValues>

                <!-- 3) Monthly repayment amount -->
                <OutputMonthlyRepaymentAmount resultSet="resultSetCompare"></OutputMonthlyRepaymentAmount>

                <!-- 4) Total repayment months -->
                <OutputTotalRepayMonths resultSet="resultSetCompare"></OutputTotalRepayMonths>

                <!-- 5) End of Year repayment balance -->
                <OutputEOYRepaymentList resultSet="resultSetCompare" userInput="userInputCompare"></OutputEOYRepaymentList>

                <!-- 6) Warning indicator of repayment increase, 3% -->
                <OutputIntIncreaseMessage resultSet="resultSetCompare"></OutputIntIncreaseMessage>
            </div>
        }
    </div>
}

@code
{

    private int calcOption = 0;
    private UserInput userInput = new();
    private UserInput userInputCompare = new();
    private Results resultSet = new();
    private Results resultSetCompare = new();
    private Results resultSetInterestOnly = new();
    private Graph graph = new();
    private string errorMessage = "";

    private void DisplayResults()
    {
        errorMessage = "";

        <!-- Error messages: 1st loan -->
        if (userInput.Amount <= 0)
        {
            errorMessage = "Amount needs to be more than 0.";
        }

        if (userInput.InterestRatePercentage <= 0)
        {
            errorMessage = "Interest Rate needs to be more than 0.";
        }

        if (userInput.Term <= 0)
        {
            errorMessage = "Term input is needed. Term input needs to be more than 0.";
        }

        if (userInput.Deposit < 0 || userInput.Deposit < 0)
        {
            errorMessage = "Cannot have negative Deposit amount";
        }

        <!-- Error messages: 2nd loan -->
        if (calcOption == 2 && userInputCompare.Amount <= 0)
        {
            errorMessage = "For the second loan, we need the amount to be more than 0.";
        }

        if (calcOption == 2 && userInputCompare.InterestRatePercentage <= 0)
        {
            errorMessage = "For the second loan, Interest Rate needs to be more than 0.";
        }

        if (calcOption == 2 && userInputCompare.Term <= 0)
        {
            errorMessage = "For the second loan, Term input is needed. Term input needs to be more than 0.";
        }

        if (calcOption == 2 && userInputCompare.Deposit < 0 && userInput.Deposit < 0)
        {
            errorMessage = "For the second loan, Cannot have negative Deposit amount";
        }

        <!-- Output Calculation Results -->
        if (calcOption == 1)
        {
            //do calc single
            resultSet = LogicMethod.CalculateRepayments(userInput, userInput.Type);
            // resultSetInterestOnly = LogicMethod.CalculateInterestOnlyResultSet(userInput)
        }
        else
        {
            //do calc compare
            resultSet = LogicMethod.CalculateRepayments(userInput, userInput.Type);
            resultSetCompare = LogicMethod.CalculateRepayments(userInputCompare, userInputCompare.Type);
        }
    }

    <!-- Set Calculator option -->
    void setCalcOption(int option)
    {
        calcOption = option;

        <!-- Default inputs when switching from Single to Compare mortgages -->
        userInputCompare.Amount = userInput.Amount;
        userInputCompare.Deposit = userInput.Deposit;
        userInputCompare.InterestRatePercentage = userInput.InterestRatePercentage;
        userInputCompare.Term = userInput.Term;
        userInputCompare.Type = userInput.Type;
    }

    <!-- Calculations -->
    double calcPrinciple()
    {
        double principle = userInput.Amount - userInput.Deposit;
        return principle;
    }
    double calcIntTotal()
    {
        return resultSet.TotalAmount - calcPrinciple();
    }

    double calcPrincipleCompare()
    {
        return userInputCompare.Amount - userInputCompare.Deposit;
    }
    double calcIntTotalCompare()
    {
        return resultSetCompare.TotalAmount - calcPrincipleCompare();
    }

    double calcInterestOnlyLoanTotal()
    {
        return resultSet.TotalAmount + (userInput.Amount - userInput.Deposit);
    }
    double calcInterestOnlyLoanTotalCompare()
    {
        return resultSetCompare.TotalAmount + (userInputCompare.Amount - userInputCompare.Deposit);
    }

    double calcIntValueForIntOnlyLoan()
    {
        return calcInterestOnlyLoanTotal() - (userInput.Amount - userInput.Deposit);
    }
    double calcIntValueForIntOnlyLoanCompare()
    {
        return calcInterestOnlyLoanTotalCompare() - (userInputCompare.Amount - userInputCompare.Deposit);
    }
}

