@page "/mortgageCalculator"
@using System
@using Microsoft.AspNetCore.Mvc
@using Mortgage_Calculator

<PageTitle>Mortgage Calculator</PageTitle>

@*<a style="font-size:x-small" href="/home">Click to go back </a>*@

<div class="h2 pb-0 mb-0 border-bottom page-header br-top-8">
    <p>Mortgage Calculator</p>
</div>

<!--Navbar setup and styling-->
<nav class="calc-nav-options br-bottom-8">
    <div class="topnav text-left">
        <a class="nav-link" style="color:white; cursor:pointer; text-decoration:none; hover" @onclick="() => setCalcOption(1)">Calculate a mortgage</a>
        &nbsp; &nbsp;
        <a class="nav-link" style="color: white; cursor: pointer; text-decoration: none" @onclick="() => setCalcOption(2)">Compare mortgages</a>
    </div>
    <br />
</nav>

<!-- Error message output -->
@if (errorMessage != "")
{
    <div class="alert alert-danger" role="alert" style="text-align:center">
        <p style="white-space: pre-line" class="text-[6px]">
            <span>
                @errorMessage
            </span>
        </p>
    </div>
}

<!-- Single mortgage calculator -->
@if (calcOption == 1) // Option for single mortgage calculation
{
    <section class="mc-tool">
        <br />
        <div class="container text-left">
            <div class="row">
                <!-- Input form section (6 of 12 columns) -->
                <div class="col-sm-6">
                    <div title="Single mortgage form">
                        <div class="h2 pb-2 mb-4 border-bottom form-header-colour">
                            <h5>Single mortgage</h5>
                        </div>

                        <div class="chart-container">
                            <!-- Calculator inputs -->
                            <CalculatorInputs userInput="userInput"></CalculatorInputs>
                        </div>

                        <!-- Calculate button -->
                        <ButtonCalculate DisplayResults="DisplayResults"></ButtonCalculate>
                    </div>
                </div>

                <!-- Results output section (6 of 12 columns) -->
                <div class="col-sm-6">
                    <div title="Results display">
                        @if (resultSet?.PaymentItems?.Count > 0 && errorMessage == string.Empty) // Results output
                        {
                            <div class="results-container">
                                <ResultsHeader></ResultsHeader>

                                <div class="text-grey-800">
                                    <!-- 1) Monthly repayment amount -->
                                    <OutputMonthlyRepaymentAmount resultSet="resultSet"></OutputMonthlyRepaymentAmount>
                                    <hr class="border-0 h-px bg-grey-400">

                                    <!-- 2) Total repayment, Capital and Interest only values -->
                                    <OutputTotalAmount userInput="userInput" resultSet="resultSet"></OutputTotalAmount>

                                    <!-- Line chart output -->
                                    <div class="chart-container">
                                        <LineChartOutput resultSet="resultSet"></LineChartOutput>
                                    </div>

                                    <!-- 3) Total repayment months -->
                                    <OutputTotalRepayMonths resultSet="resultSet"></OutputTotalRepayMonths>

                                    <!-- 4) List: End of Year repayment balance -->
                                    <OutputEOYRepaymentList resultSet="resultSet" userInput="userInput"></OutputEOYRepaymentList>

                                    <!-- 5) Warning indicator of repayment increase, 3% -->
                                    <OutputIntIncreaseMessage resultSet="resultSet"></OutputIntIncreaseMessage>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
}

<!-- Compare mortgages calculator -->
@if (calcOption == 2)
{
    <section class="mc-tool">
        <br />
        <div class="container text-left">
            <div class="row">
                <!-- Input form section -->
                <div class="col-sm-6">

                    <div title="Comparison mortgages form">
                        <div class="h2 pb-2 mb-4 border-bottom form-header-colour">
                            <h5>First mortgage</h5>
                        </div>
                        <!-- Adjust the width with Bootstrap grid (6 of 12 columns) -->

                        <div class="chart-container">
                            <!-- Calculator inputs 1 -->
                            <CalculatorInputs userInput="userInput"></CalculatorInputs>
                        </div>

                        <div class="h2 pb-2 mb-4 border-bottom form-header-colour">
                            <h5>Second mortgage</h5>
                        </div>

                        <div class="chart-container">
                            <!-- Calculator inputs 2 -->
                            <CalculatorInputs userInput="userInputCompare"></CalculatorInputs>
                        </div>

                        <ButtonCalculate DisplayResults="DisplayResults"></ButtonCalculate>

                    </div>
                </div>

                <!-- Results output section -->
                <div class="col-sm-6">
                    <!-- Adjust the width with Bootstrap grid (6 of 12 columns) -->
                    <!-- RESULT OUTPUT -->
                    <div title="Results display">
                        @if (resultSet?.PaymentItems?.Count > 0 && resultSetCompare?.PaymentItems?.Count > 0 && errorMessage == string.Empty)
                        {
                            <div class="results-container">

                                <ResultsHeader></ResultsHeader>

                                <!-- Line chart output -->
                                <div class="chart-container"><LineChartOutput resultSet="resultSet" resultSetCompare="resultSetCompare"></LineChartOutput></div>

                                <!-- FIRST RESULT OUTPUT -->
                                <div class="text-grey-800">
                                    <br />
                                    <h5>Mortgage 1 Results</h5>

                                    <!-- 1) Monthly repayment amount -->
                                    <OutputMonthlyRepaymentAmount resultSet="resultSet"></OutputMonthlyRepaymentAmount>

                                    <!-- 2) Total repayment, Capital and Interest only values -->
                                    <!-- Outputs: Total repayment amount, Capital and Interest values -->
                                    <OutputTotalAmount userInput="userInput" resultSet="resultSet"></OutputTotalAmount>

                                    <!-- 3) Total repayment months -->
                                    <OutputTotalRepayMonths resultSet="resultSet"></OutputTotalRepayMonths>

                                    <!-- 4) List: End of Year repayment balance -->
                                    <OutputEOYRepaymentList resultSet="resultSet" userInput="userInput"></OutputEOYRepaymentList>

                                    <!-- 5) Warning indicator of repayment increase, 3% -->
                                    <OutputIntIncreaseMessage resultSet="resultSet"></OutputIntIncreaseMessage>


                                    <!-- SECOND RESULT OUTPUT -->
                                    <br />
                                    <hr class="border-0 h-px bg-grey-400">
                                    <h5>Mortgage 2 Results</h5>

                                    <!-- 1) Monthly repayment amount -->
                                    <OutputMonthlyRepaymentAmount resultSet="resultSetCompare"></OutputMonthlyRepaymentAmount>

                                    <!-- 2) Total repayment, Capital and Interest only values -->
                                    <!-- Outputs: Total repayment amount, Capital and Interest values -->
                                    <OutputTotalAmount userInput="userInputCompare" resultSet="resultSetCompare"></OutputTotalAmount>

                                    <!-- 3) Total repayment months -->
                                    <OutputTotalRepayMonths resultSet="resultSetCompare"></OutputTotalRepayMonths>

                                    <!-- 4) List: End of Year repayment balance -->
                                    <OutputEOYRepaymentList resultSet="resultSetCompare" userInput="userInputCompare"></OutputEOYRepaymentList>

                                    <!-- 5) Warning indicator of repayment increase, 3% -->
                                    <OutputIntIncreaseMessage resultSet="resultSetCompare"></OutputIntIncreaseMessage>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@code
{

    private int calcOption = 0;
    public UserInput userInput = new();
    private UserInput userInputCompare = new();
    private Results resultSet = new();
    private Results resultSetCompare = new();
    private Results resultSetInterestOnly = new();
    public string errorMessage = "";

    
    public void DisplayResults()
    {
        errorMessage = "";

        // Error messages: 1st loan
        if (userInput.Amount <= 0)
        {
            errorMessage = "Amount needs to be more than 0.\n";
        }

        if (userInput.Term < CONSTANTS.MIN_TERM_YEARS)
        {
            errorMessage += "Term input is required and needs to be more than 0.\n";
        }
        if (userInput.Term > CONSTANTS.MAX_TERM_YEARS)
        {
            errorMessage += "Term input cannot be more than 40 years.\n";
        }

        if (userInput.Type != MortgageType.Standard && userInput.Type != MortgageType.Interest_Only)
        {
            errorMessage += "Select a valid mortgage Type.\n";
        }

        if (userInput.InterestRatePercentage < CONSTANTS.MIN_INT_RATE)
        {
            errorMessage += "Interest rate input needs to be more than 0.\n";
        }
        if (userInput.InterestRatePercentage > CONSTANTS.MAX_INT_RATE)
        {
            errorMessage += "Interest rate input cannot exceed 100%.\n";
        }

        if (userInput.Deposit < 0)
        {
            errorMessage += "Cannot have a negative Deposit amount.\n";
        }
        if (userInput.Deposit >= userInput.Amount)
        {
            errorMessage += "Deposit amount cannot be more or equal to the Loan amount.\n";
        }

        // Error messages: 2nd loan (if calcOption is 2)
        if (calcOption == 2)
        {
            if (userInputCompare.Amount <= 0)
            {
                errorMessage += "For the second loan, the Amount has to be more than 0.\n";
            }

            if (userInputCompare.Term <= 0)
            {
                errorMessage += "For the second loan, Term input is needed.\n";
            }
            if (userInputCompare.Term > 40)
            {
                errorMessage += "For the second loan, Term input cannot be more than 40 years.\n";
            }

            if (userInputCompare.Type != MortgageType.Standard && userInputCompare.Type != MortgageType.Interest_Only)
            {
                errorMessage += "For the second loan, select a valid mortgage Type.\n";
            }

            if (userInputCompare.InterestRatePercentage <= 0)
            {
                errorMessage += "For the second loan, Interest rate input is needed.\n";
            }

            if (userInputCompare.Deposit < 0)
            {
                errorMessage += "For the second loan, cannot have a negative Deposit amount.\n";
            }
        }

        <!-- Perform Calculation Results -->
        if (calcOption == 1)
        {
            resultSet = LogicMethod.CalculateRepayments(userInput, userInput.Type);
        }
        else if (calcOption == 2)
        {
            resultSet = LogicMethod.CalculateRepayments(userInput, userInput.Type);
            resultSetCompare = LogicMethod.CalculateRepayments(userInputCompare, userInputCompare.Type);
        }
    }

    <!-- Set Calculator option -->
    void setCalcOption(int option)
    {
        calcOption = option;

        <!-- Default inputs when switching from Single to Compare mortgages -->
        userInputCompare.Amount = userInput.Amount;
        userInputCompare.Deposit = userInput.Deposit;
        userInputCompare.InterestRatePercentage = userInput.InterestRatePercentage;
        userInputCompare.Term = userInput.Term;
        userInputCompare.Type = userInput.Type;
    }

    <!-- Calculations -->
    double calcPrinciple()
    {
        double principle = userInput.Amount - userInput.Deposit;
        return principle;
    }
    double calcIntTotal()
    {
        return resultSet.TotalAmount - calcPrinciple();
    }

    double calcPrincipleCompare()
    {
        return userInputCompare.Amount - userInputCompare.Deposit;
    }
    double calcIntTotalCompare()
    {
        return resultSetCompare.TotalAmount - calcPrincipleCompare();
    }

    double calcInterestOnlyLoanTotal()
    {
        return resultSet.TotalAmount + (userInput.Amount - userInput.Deposit);
    }
    double calcInterestOnlyLoanTotalCompare()
    {
        return resultSetCompare.TotalAmount + (userInputCompare.Amount - userInputCompare.Deposit);
    }

    double calcIntValueForIntOnlyLoan()
    {
        return calcInterestOnlyLoanTotal() - (userInput.Amount - userInput.Deposit);
    }
    double calcIntValueForIntOnlyLoanCompare()
    {
        return calcInterestOnlyLoanTotalCompare() - (userInputCompare.Amount - userInputCompare.Deposit);
    }
}

