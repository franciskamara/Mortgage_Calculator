@page "/lineChart"
@using BlazorBootstrap
@using Color = System.Drawing.Color
@using Mortgage_Calculator

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    [Parameter]
    public Results resultSet { get; set; } = default!;
    public Results resultSetCompare { get; set; } = default!;


    protected override void OnInitialized()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        List<string> labels = resultSet.PaymentItems.Select(pi => pi.Date.ToString("yyyy")).ToList();
        List<IChartDataset> datasets = new List<IChartDataset>();

        var dataset1 = new LineChartDataset()
        {
            Label = "Mortgage 1",
            Data = resultSet.MonthlyRepayments,
            BackgroundColor = new List<string> { colors[0] },
            BorderColor = new List<string> { colors[0] },
            BorderWidth = new List<double> { 2 },
            HoverBorderWidth = new List<double> { 4 },
            PointBackgroundColor = new List<string> { colors[0] },
            PointRadius = new List<int> { 0 }, // hide points
            PointHoverRadius = new List<int> { 4 },
        };
        datasets.Add(dataset1);

        if (resultSetCompare != null && resultSetCompare.PaymentItems != null)//resultSetCompare?.MonthlyRepayments?.Count > 0)
        {
            var dataset2 = new LineChartDataset()
            {
                Label = "Mortgage 2",
                Data = resultSetCompare.MonthlyRepayments,
                BackgroundColor = new List<string> { colors[1] },
                BorderColor = new List<string> { colors[1] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[1] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };
            datasets.Add(dataset2);

        }


        chartData = new ChartData
        {
            Labels = labels,
            Datasets = datasets
        };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X.Title.Text = "Years";
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y.Title.Text = "Amount";
        lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title.Text = "Repayments over time";
        lineChartOptions.Plugins.Title.Display = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}