@page "/graph2"
@using Mortgage_Calculator
@using Color = System.Drawing.Color

<LineChart @ref="lineChart" Width="800" Class="mb-4" />


@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    [Parameter]
    public Results resultSet { get; set; }

    private int datasetsCount = 0;
    private int labelsCount = 0;

    private Random random = new();

    protected override void OnInitialized()
    {
        chartData = new ChartData
        {
            Labels = GetDataLabels(), Datasets = GetDataSets(1)
        };
        lineChartOptions = new()
        {
            Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RandomizeAsync()
    {
        if (chartData is null || chartData.Datasets is null || !chartData.Datasets.Any()) return;

        var newDatasets = new List<IChartDataset>();

        foreach (var dataset in chartData.Datasets)
        {
            if (dataset is LineChartDataset lineChartDataset
                && lineChartDataset is not null
                && lineChartDataset.Data is not null)
            {
                var count = lineChartDataset.Data.Count;

                var newData = new List<double>();
                for (var i = 0; i < count; i++)
                {
                    newData.Add(random.Next(200));
                }

                lineChartDataset.Data = newData;
                newDatasets.Add(lineChartDataset);
            }
        }

        chartData.Datasets = newDatasets;

        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    private async Task AddDatasetAsync()
    {
        if (chartData is null || chartData.Datasets is null) return;

        var chartDataset = GetLineChartDataset();
        chartData = await lineChart.AddDatasetAsync(chartData, chartDataset, lineChartOptions);
    }

    private async Task AddDataAsync()
    {
        if (chartData is null || chartData.Datasets is null)
            return;

        var data = new List<IChartDatasetData>();
        foreach (var dataset in chartData.Datasets)
        {
            if (dataset is LineChartDataset lineChartDataset)
                data.Add(new LineChartDatasetData(lineChartDataset.Label, random.Next(200)));
        }

        chartData = await lineChart.AddDataAsync(chartData, GetNextDataLabel(), data);
    }

    private async Task ShowHorizontalLineChartAsync()
    {
        lineChartOptions.IndexAxis = "Amount (£)";
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    private async Task ShowVerticalLineChartAsync()
    {
        lineChartOptions.IndexAxis = "Remaining amount";
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    #region Data Preparation

    private List<IChartDataset> GetDataSets(int numberOfDatasets)
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < numberOfDatasets; index++)
        {
            datasets.Add(GetLineChartDataset());
        }

        return datasets;
    }

    private LineChartDataset GetLineChartDataset()
    {
        var c = ColorBuilder.CategoricalTwelveColors[datasetsCount].ToColor();

        datasetsCount += 1;

        List<double> displaydata = new();

        foreach (PaymentItem pi in resultSet.PaymentItems)
        {
            if (pi.Date.Month == 12)
            {
                displaydata.Add(pi.RemainingAmount);
            }
        }


        return new LineChartDataset()
        {
            Label = $"Mortgage {datasetsCount}",
            Data = displaydata,//TODO
            BackgroundColor = new List<string> { c.ToRgbString() },
            BorderColor = new List<string> { c.ToRgbString() },
            BorderWidth = new List<double> { 2 },
            HoverBorderWidth = new List<double> { 4 },
            PointBackgroundColor = new List<string> { c.ToRgbString() },
            PointRadius = new List<int> { 0 }, // hide points
            PointHoverRadius = new List<int> { 4 },
        };
    }

    private List<double> GetRandomData()
    {
        var data = new List<double>();
        for (var index = 0; index < labelsCount; index++)
        {
            data.Add(random.Next(200));
        }

        return data;
    }

    private List<string> GetDataLabels()
    {
        List<string> labels = new();//List of labels to be used

        int loanTermYears = resultSet.PaymentItems.Count / CONSTANTS.MONTHS_OF_YEAR;//Payment items in months multiplied by 12 month

        for (int i = 0; i < loanTermYears; i++)
        {
            if (i == 0 || (i + 1) % 5 == 0)
            {
                string yearLabel = $"Year {i + 1}";
                labels.Add(yearLabel);
            }
            else
            {
                labels.Add(string.Empty);//Put nothing the the other lines
            }
        }

        return labels;
    }


    private string GetNextDataLabel()
    {
        while (labelsCount < resultSet.PaymentItems.Count)
        {
            PaymentItem paymentItem = resultSet.PaymentItems[labelsCount];

            //Check if the current PaymentItem is for December
            if (paymentItem.Date.Month == 12)
            {
                labelsCount++;
                return $"Dec/{paymentItem.Date.Year}";
            }

            labelsCount++;
        }

        return string.Empty;//Return an empty string if no more December labels are found
    }


    #endregion Data Preparation
}